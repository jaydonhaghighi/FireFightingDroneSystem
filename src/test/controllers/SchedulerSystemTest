package controllers;

import controllers.DroneStateMachines;
import models.FireEvent;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

class SchedulerSystemTest {
    private DroneStateMachines droneStateMachines;

    @BeforeEach
    void setUp() {
        droneStateMachines = new DroneStateMachines();
    }

    @Test
    void testScheduleFireEvent() {
        // test scheduling and handling of a fire event
        FireEvent fire1 = new FireEvent("10:00", 3, "Wildfire", "High");
        FireEvent fire2 = new FireEvent("12:00", 4, "House Fire", "Medium");

        droneStateMachines.scheduleFireEvent(fire1);
        assertNotNull(droneStateMachines);

        droneStateMachines.dropAgent();
        droneStateMachines.returningBack();
        droneStateMachines.taskCompleted();

        droneStateMachines.scheduleFireEvent(fire2);
        assertNotNull(droneStateMachines);

        droneStateMachines.dropAgent();
        droneStateMachines.returningBack();
        droneStateMachines.taskCompleted();
    }

    @Test
    void testSchedulerAssignsFireCorrectly() {
        // test if the scheduler correctly assigns and queues fire events
        FireEvent fire1 = new FireEvent("10:00", 3, "Wildfire", "High");
        FireEvent fire2 = new FireEvent("10:05", 4, "House Fire", "Medium");

        droneStateMachines.scheduleFireEvent(fire1);
        assertEquals("EnRoute", droneStateMachines.getCurrentStateName());

        droneStateMachines.scheduleFireEvent(fire2);
        assertEquals(1, droneStateMachines.getQueueSize());
    }

    @Test
    void testNoFireEvents() {
        // test that the system remains idle when no fire events are scheduled
        assertEquals("Idle", droneStateMachines.getCurrentStateName());

        droneStateMachines.dropAgent();
        assertEquals("Idle", droneStateMachines.getCurrentStateName());

        droneStateMachines.returningBack();
        assertEquals("Idle", droneStateMachines.getCurrentStateName());
    }

    @Test
    void testFireEventProcessingOrder() {
        // test that fire events are processed in correct order
        FireEvent fire1 = new FireEvent("10:00", 3, "Wildfire", "High");
        FireEvent fire2 = new FireEvent("10:05", 4, "House Fire", "Medium");

        droneStateMachines.scheduleFireEvent(fire1);
        assertEquals("EnRoute", droneStateMachines.getCurrentStateName());

        droneStateMachines.scheduleFireEvent(fire2);
        assertEquals(1, droneStateMachines.getQueueSize());

        droneStateMachines.dropAgent();
        droneStateMachines.returningBack();
        droneStateMachines.taskCompleted();

        assertEquals("EnRoute", droneStateMachines.getCurrentStateName());
    }
}
